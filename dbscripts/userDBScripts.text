


CREATE TABLE roles (
    role_id SERIAL PRIMARY KEY,
    role_name VARCHAR(50) UNIQUE NOT NULL,
    role_short_name VARCHAR(20) NOT NULL
);


INSERT INTO roles (role_name, role_short_name) VALUES
('Administrator', 'ADMIN'),
('Manager', 'MGR'),
('Staff', 'STF');

CREATE TABLE users (
    user_id SERIAL PRIMARY KEY,                           -- Auto-incremented User ID
    first_name VARCHAR(50) NOT NULL,                      -- First Name (Required)
    middle_name VARCHAR(50),                              -- Middle Name (Optional)
    last_name VARCHAR(50) NOT NULL,                       -- Last Name (Required)

    login_id VARCHAR(50) UNIQUE NOT NULL,                 -- Login ID (Required, Unique)

    role_id INTEGER NOT NULL REFERENCES roles(id),        -- Role (Foreign Key to roles table)

    primary_mobile VARCHAR(15) NOT NULL,                  -- Primary Mobile No. (Required)
    secondary_mobile VARCHAR(15),                         -- Secondary Mobile No. (Optional)

    primary_email VARCHAR(100) NOT NULL,                  -- Primary Email (Required)
    alternative_email VARCHAR(100),                       -- Alternative Email (Optional)
    user_active_flag TEXT(15),
    
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,       -- Created Timestamp
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,        -- Updated Timestamp
    
);



:::::::::::::- User Table Data with Password -:::::::::::::

CREATE TABLE users (
  user_id SERIAL PRIMARY KEY,
  first_name VARCHAR(50) NOT NULL,
  middle_name VARCHAR(50),
  last_name VARCHAR(50) NOT NULL,
  login_id VARCHAR(50) UNIQUE NOT NULL,
  password TEXT NOT NULL,                          -- üîê Add hashed password field
  role_id INTEGER NOT NULL REFERENCES roles(role_id),
  primary_mobile VARCHAR(15) NOT NULL,
  secondary_mobile VARCHAR(15),
  primary_email VARCHAR(100) NOT NULL,
  alternative_email VARCHAR(100),
  user_active_flag VARCHAR(15),
  first_login_flag BOOLEAN DEFAULT TRUE,           -- ‚úÖ Track first-time login
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);




:::::::::::::- Insertion Data -:::::::::::::




-- User sessions table
CREATE TABLE IF NOT EXISTS user_sessions (
    id BIGSERIAL PRIMARY KEY,
    user_id INT NOT NULL REFERENCES users(user_id) ON DELETE CASCADE,
    token TEXT NOT NULL UNIQUE,            -- store JWT token
    login_time TIMESTAMP NOT NULL DEFAULT NOW(),
    logout_time TIMESTAMP NULL,
    duration_minutes NUMERIC(10,2) NULL,   -- calculated at logout
    created_at TIMESTAMP DEFAULT NOW()
);

-- Index for faster lookups
CREATE INDEX idx_user_sessions_user_id ON user_sessions(user_id);
CREATE INDEX idx_user_sessions_token ON user_sessions(token);


